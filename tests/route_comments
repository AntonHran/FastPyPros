import pytestfrom fastapi import status
from PhotoShare.app.models.user import User, UserRole
from PhotoShare.app.services.comment_services import CommentServices


@pytest.fixture(scope='function')
def token(client, user, session):
    response = client.post("auth/signup",
                json={"username": "test230",
                "email": "test230@example.com",
                "password_checksum": "123456789",
                "first_name": "test",
                "last_name": "230"})
    current_user = session.query(User).filter(User.email == user.get('email')).first()    
    if current_user is not None:
        current_user.role = UserRole.Admin
        session.commit()
    else:        
      raise Exception("User not found")
    response = client.post("auth/login",
      data={"username": "test230@example.com",
                        "password": "123456789"},
      headers={'Content-Type': 'application/x-www-form-urlencoded'})
    data = response.json()  
    return data["access_token"]


def test_post_comment(client, token, session):  
  user = User(username="test230", email="test230@example.com", password_checksum="123456789")
    session.add(user)
    session.commit()
    response = client.post("/api/comments", json={"content": "Test text for new comment", "image_id": 1},                           headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200, response.text
    body_data = response.json()
    assert body_data.get("id") is not None
    assert body_data["content"] == "Test text for new comment"

def test_show_user_comments(client, token):    
  response = client.get("/api/comments/user/1", headers={"Authorization": f"Bearer {token}"})
  assert response.status_code == 200, response.text    
  data = response.json()
  assert data[0].get("id") == 1


def test_show_comments(client, token):   
  response = client.get("api/comments/image/1", headers={"Authorization": f"Bearer {token}"})
  assert response.status_code == 200, response.text    data = response.json()
  assert data[0].get("id") == 1


def test_update_comment(client, token):   
  response = client.put(
        "api/comments/1", json={"content": "NEW Test text for comment"},        headers={"Authorization": f"Bearer {token}"}
    )    assert response.status_code == 200, response.text
  body_data = response.json()    assert body_data.get("id") == 1
  assert body_data["content"] == "NEW Test text for comment"


def test_remove_comment(client, token): 
  response = client.delete("/api/comments/100", headers={"Authorization": f"Bearer {token}"})
  assert response.status_code == status.HTTP_404_NOT_FOUND    response = client.delete("/api/comments/1", headers={"Authorization": f"Bearer {token}"})
  assert response.status_code == 204
