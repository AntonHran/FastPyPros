import pytest
from fastapi.testclient import TestClient
from unittest.mock import MagicMock
from sqlalchemy.orm import Session
from PhotoShare.src.database.user import User
from PhotoShare.src.database.photo import Photo
from PhotoShare.src.database.comment import Comment
from PhotoShare.src.schemas.comment import CommentModel
from PhotoShare.src.repositories.comments import get_comments, get_comment, create_comment, update_comment, delete_comment

@pytest.fixture
def session():
    return MagicMock(spec=Session)

@pytest.fixture
def test_user():
    return User(id=1, email='someemail@gmail.com', role=1, avatar='https://www.gravatar.com/avatar/55502f40dc8b7c769880b10874abc9d0?s=32&d=identicon&r=PG', username='Somename', confirmed=True, password='secret')

@pytest.fixture
def test_photo():
    return Photo(id=1, photo_url="http://example.com/photo.jpg")

@pytest.fixture
def client():
    from main import app  # Здесь подставьте правильный импорт вашего FastAPI приложения
    return TestClient(app)

def test_get_comment(session):
    expected_comment = Comment(id=1, content="Test content")
    session.query().filter().first.return_value = expected_comment
    result = get_comment(comment_id=1, db=session)
    assert result == expected_comment

def test_get_comments(session):
    expected_comments = [Comment(id=1, content="content1"), Comment(id=2, content="content2")]
    session.query().filter().limit().all.return_value = expected_comments
    result = get_comments(2, 1, session)
    assert result == expected_comments

def test_create_comment(session, test_user):
    comment_model = CommentModel(content="Test content")
    expected_comment = Comment(id=1, content=comment_model.content, user_id=1, photo_id=1)
    session.add = MagicMock()
    session.commit = MagicMock()
    session.refresh = MagicMock()
    result = create_comment(comment_model, test_user, 1, session)
    assert result.content == expected_comment.content
    assert result.user_id == expected_comment.user_id
    assert result.photo_id == expected_comment.photo_id

def test_create_comments_by_photo(session):
    comments = [Comment(), Comment(), Comment()]
    session.query().filter().limit().all.return_value = comments
    result = get_comments(limit=10, photo_id=1, db=session)
    assert result == comments

def test_update_comment(session):
    comment_model = CommentModel(id=1, content="Updated content")
    existing_comment = Comment(id=1, content="Old content")
    session.query().filter().first.return_value = existing_comment
    updated_comment_obj = update_comment(comment_model, 1, session)
    assert updated_comment_obj is not None
    assert updated_comment_obj.content == "Updated content"

def test_delete_comment(session):
    existing_comment = Comment(id=1, content="Old content")
    session.query().filter().first.return_value = existing_comment
    deleted_comment = delete_comment(1, session)
    assert deleted_comment == existing_comment
    session.delete.assert_called_once_with(existing_comment)
    session.commit.assert_called_once()
